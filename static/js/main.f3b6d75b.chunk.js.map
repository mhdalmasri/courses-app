{"version":3,"sources":["components/CourseForm.js","components/CourseList.js","App.js","serviceWorker.js","index.js"],"names":["CourseForm","props","react_default","a","createElement","onSubmit","addCourse","type","onChange","updateCourse","value","current","placeholder","CourseList","state","isEdit","renderCourse","_this","details","name","onClick","toggleState","deleteCourse","index","setState","updateCourseItem","e","preventDefault","editCourse","input","renderUpdateForm","ref","v","defaultValue","this","Fragment","Component","App","courses","target","push","splice","_this2","courseList","map","course","CourseList_CourseList","key","update","handleChange","className","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f3b6d75b.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function CourseForm(props) {\n  return (\n    <div>\n      <form onSubmit={props.addCourse}>\n        <input\n          type=\"text\"\n          onChange={props.updateCourse}\n          value={props.current}\n          placeholder=\"add new course\"\n        />\n        <button type=\"submit\">Add</button>\n      </form>\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\n\nexport default class CourseList extends Component {\n  state = {\n    isEdit: false\n  };\n  renderCourse = () => {\n    return (\n      <li>\n        <span>{this.props.details.name}</span>\n        <button\n          onClick={() => {\n            this.toggleState();\n          }}\n        >\n          Edit\n        </button>\n        <button\n          onClick={() => {\n            this.props.deleteCourse(this.props.index);\n          }}\n        >\n          Delete\n        </button>\n      </li>\n    );\n  };\n\n  toggleState = () => {\n    let { isEdit } = this.state;\n    this.setState({\n      isEdit: !isEdit\n    });\n  };\n\n  updateCourseItem = e => {\n    e.preventDefault();\n    this.props.editCourse(this.props.index, this.input.value);\n    this.toggleState();\n  };\n\n  renderUpdateForm = () => {\n    return (\n      <form onSubmit={this.updateCourseItem}>\n        <input\n          type=\"text\"\n          ref={v => {\n            this.input = v;\n          }}\n          defaultValue={this.props.details.name}\n        />\n        <button>Update</button>\n      </form>\n    );\n  };\n  render() {\n    let { isEdit } = this.state;\n    return (\n      <React.Fragment>\n        {isEdit ? this.renderUpdateForm() : this.renderCourse()}\n      </React.Fragment>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport CourseForm from \"./components/CourseForm\";\nimport CourseList from \"./components/CourseList\";\n\nclass App extends Component {\n  state = {\n    courses: [\n      { name: \"HTML\" },\n      { name: \"CSS\" },\n      { name: \"JavaScript\" },\n      { name: \"React.js\" },\n      { name: \"Node.js\" }\n    ],\n    current: \"\"\n  };\n\n  updateCourse = e => {\n    this.setState({\n      current: e.target.value\n    });\n  };\n  addCourse = e => {\n    e.preventDefault();\n    let current = this.state.current;\n    let courses = this.state.courses;\n    courses.push({ name: current });\n    this.setState({\n      courses: courses,\n      current: \"\"\n    });\n  };\n\n  deleteCourse = index => {\n    let courses = this.state.courses;\n    courses.splice(index, 1);\n    this.setState({\n      courses\n    });\n  };\n\n  editCourse = (index, value) => {\n    let courses = this.state.courses;\n    let course = courses[index];\n    course[\"name\"] = value;\n    this.setState({\n      courses\n    });\n  };\n\n  render() {\n    const { courses } = this.state;\n    const courseList = courses.map((course, index) => {\n      return (\n        <CourseList\n          details={course}\n          key={index}\n          index={index}\n          update={this.handleChange}\n          deleteCourse={this.deleteCourse}\n          editCourse={this.editCourse}\n        />\n      );\n    });\n    return (\n      <section className=\"App\">\n        <h2>Courses App</h2>\n        <CourseForm\n          updateCourse={this.updateCourse}\n          addCourse={this.addCourse}\n          current={this.state.current}\n        />\n        <ul>{courseList}</ul>\n      </section>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}